#!/usr/bin/env python

import logging
import os
import sys

from collections import namedtuple
from contextlib import contextmanager
from shutil import rmtree
from subprocess import Popen, PIPE
from tempfile import mkdtemp
from time import sleep

RUNTIME = 600
SLEEP = "/bin/sleep"

log = logging.getLogger(__name__)

def main():
    global log

    log.level = logging.DEBUG
    log.addHandler(logging.StreamHandler())

    with tempdir() as tmp:
        with open(os.path.join(tmp, "submit"), 'w') as submit:
            log.debug("writing submit file to %s", submit.name)
            submit.write(SUBMIT.format(
                runtime=RUNTIME,
                sleep=SLEEP,
            ))
            submit = submit.name

        log.debug("running condor_submit")
        condor_submit = Popen(["condor_submit", submit], stdout=PIPE, stderr=PIPE)
        stdout, stderr = condor_submit.communicate()
        log.debug("condor_submit returned %d", condor_submit.returncode)
        if condor_submit.returncode != 0:
            sys.stderr.write("condor_submit returned %d", condor_submit.returncode)
            sys.stdout.write(stdout)
            sys.stderr.write(stderr)
            return condor_submit.returncode
        
        with open(os.path.join(tmp, "log")) as logfile:
            jobid = monitor(tail(logfile))

        condor_ssh_to_job = Popen(["condor_ssh_to_job", jobid])
        condor_ssh_to_job.wait()

    # We don't really care if condor_rm fails here.
    condor_rm = Popen(["condor_rm", jobid], stdout=PIPE, stderr=PIPE)
    condor_rm.communicate()

    return condor_ssh_to_job.returncode

def tail(file):
    while True:
        line = file.readline()
        if not line:
            sleep(.2)
        else:
            yield line

def monitor(stream):
    for line in stream:
        if line == "...\n":
            continue
        record = Record(*line.split(None, 4))
        log.debug("%s %s", record.id, record.message.rstrip())
        if "Job executing" in record.message:
            return record.id.strip("()")

@contextmanager
def tempdir(*args, **kwargs):
    tmp = mkdtemp(*args, **kwargs)
    log.debug("created temporary directory %s", tmp)
    os.chdir(tmp)

    try:
        yield tmp
    finally:
        log.debug("cleaning up temporary directory %s", tmp)
        rmtree(tmp)

SUBMIT = """\
universe                 =  vanilla
notification             =  never
executable               =  {sleep}
arguments                =  "{runtime}"
log                      =  log
transfer_executable      =  false
should_transfer_files    =  true
when_to_transfer_output  =  on_exit
getenv = true
queue
"""

Record = namedtuple("Record", "entry id date time message")

main()
